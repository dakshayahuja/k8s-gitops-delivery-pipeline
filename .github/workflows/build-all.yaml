name: build-all
on:
  push:
    branches: [main]
    paths:
      - "expense-tracker-app/**"
      - ".github/workflows/build-all.yaml"
      - "manifests/expense-tracker/**"

  workflow_dispatch:
    inputs:
      build_backend:
        type: boolean
        default: true
        description: Build & push backend image
      build_frontend:
        type: boolean
        default: true
        description: Build & push frontend image
      create_backend_secret_only:
        type: boolean
        default: false
        description: Create backend Kubernetes secret only (skip builds)

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: kustomize-image-bumps
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'expense-tracker-app/backend/**'
            frontend:
              - 'expense-tracker-app/frontend/**'

  build_backend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_backend == 'true')
    outputs:
      tag: ${{ steps.meta.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Compute tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v6
        with:
          context: ./expense-tracker-app/backend
          push: true
          tags: |
            ghcr.io/dakshayahuja/expense-backend:${{ steps.meta.outputs.TAG }}
            ghcr.io/dakshayahuja/expense-backend:latest

  build_frontend:
    runs-on: ubuntu-latest
    needs: [changes, build_backend]
    if: needs.changes.outputs.frontend == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_frontend == 'true')
    outputs:
      tag: ${{ steps.meta.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Compute tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v6
        with:
          context: ./expense-tracker-app/frontend
          push: true
          tags: |
            ghcr.io/dakshayahuja/expense-frontend:${{ steps.meta.outputs.TAG }}
            ghcr.io/dakshayahuja/expense-frontend:latest
          build-args: |
            VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}

  apply_backend_secret:
    name: Apply backend K8s Secret
    runs-on: ubuntu-latest
    if: (needs.build_backend.result == 'success') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_backend_secret_only == 'true')
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: gha-k8s-secret

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name gitops-delivery-cluster \
            --region us-east-1

      - name: Ensure namespace exists
        run: |
          kubectl get ns expense-tracker || kubectl create ns expense-tracker

      - name: Create/Update backend secret
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          kubectl -n expense-tracker create secret generic backend-secrets \
            --from-literal=GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
            --from-literal=JWT_SECRET="$JWT_SECRET" \
            --dry-run=client -o yaml | kubectl apply -f -

  bump_manifests:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    if: needs.build_backend.result == 'success' || needs.build_frontend.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Rebase on latest main
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git pull --rebase origin ${{ github.ref_name }}
      - name: Update image tags that were built in this run
        shell: bash
        run: |
          BACKEND_PATCH=manifests/expense-tracker/patches/patch-backend.yaml
          FRONTEND_PATCH=manifests/expense-tracker/patches/patch-frontend.yaml

          # Update backend image tag in patch (if we built backend)
          if [ "${{ needs.build_backend.result }}" = "success" ]; then
            B_TAG='${{ needs.build_backend.outputs.tag }}'
            sed -i -E "s|(image:\s*ghcr\.io/dakshayahuja/expense-backend:).*|\1${B_TAG}|" "$BACKEND_PATCH"
          fi

          # Update frontend image tag in patch (if we built frontend)
          if [ "${{ needs.build_frontend.result }}" = "success" ]; then
            F_TAG='${{ needs.build_frontend.outputs.tag }}'
            sed -i -E "s|(image:\s*ghcr\.io/dakshayahuja/expense-frontend:).*|\1${F_TAG}|" "$FRONTEND_PATCH"
          fi

      - name: Compute commit message
        id: commit_msg
        run: |
          msg="ci: bump"
          if [ "${{ needs.build_backend.result }}" = "success" ]; then
            msg="$msg backend->${{ needs.build_backend.outputs.tag }}"
          fi
          if [ "${{ needs.build_frontend.result }}" = "success" ]; then
            msg="$msg frontend->${{ needs.build_frontend.outputs.tag }}"
          fi
          echo "message=$msg" >> "$GITHUB_OUTPUT"

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ steps.commit_msg.outputs.message }}
          branch: ${{ github.ref_name }}